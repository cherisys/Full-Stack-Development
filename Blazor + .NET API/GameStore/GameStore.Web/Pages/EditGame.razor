@page "/game"
@page "/game/{id:int}"

@using Models
@inject NavigationManager NavigationManager
@inject IGameService GameService
@inject IGenreService GenreService


<PageTitle>@Title</PageTitle>

<h1>Game Catalog</h1>

<h3>@Title</h3>

@if (game is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-sm-4">
            <EditForm Model="@game" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="game.Name" class="form-control"></InputText>
                </div>
                <div class="mb-3">
                    <label for="genre" class="form-label">Genre:</label>
                    <InputSelect id="genre" @bind-Value="game.GenreId" class="form-select">
                        <option value="0" selected disabled>Select Genre</option>
                        @foreach (var genre in genres)
                        {
                            <option value="@genre.Id">@genre.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="game.Price" class="form-control"></InputNumber>
                </div>
                <div class="mb-3">
                    <label for="releaseDate" class="form-label">Release Date:</label>
                    <InputDate id="releaseDate" @bind-Value="game.ReleaseDate" class="form-control"></InputDate>
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    private EditGameModel? game;

    private Genre[] genres = [];

    private string Title = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        genres = await GenreService.GetGenres();
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Id is not null)
        {
            game = await GameService.GetGame(Id.Value);
            Title = $"Edit {game.Name}";
        }
        else
        {
            game = new EditGameModel
            {
                Id = 0,
                Name = string.Empty,
                GenreId = -1,
                Price = 0.00M,
                ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow)
            };

            Title = "New Game";
        }
        base.OnParametersSet();
    }

    private async Task HandleSubmit()
    {
        if (game!.Id == 0)
        {
           await GameService.CreateGame(game);
        }
        else
        {
           await GameService.UpdateGame(game);
        }

        NavigationManager.NavigateTo("/");
    }

    private void HandleCancel()
    {
        NavigationManager.NavigateTo("/");
    }
}
