@page "/"
@using Models
@inject NavigationManager NavigationManager
@inject IGameService GameService

<PageTitle>Game Catalog</PageTitle>

<h1>Game Catalog</h1>

<div class="row mb-4">
    <div class="col-sm-6">
        <button type="button" class="btn btn-primary" @onclick="CreateGame">New Game</button>
    </div>
</div>

@if(games is null)
{
    <p><em>Loading...</em></p>
}
else
{

    <DeleteGame Game="@currentGame" OnClose="@OnDeleteModelClosed"></DeleteGame>

    <table class="table table-stripped table-bordered table-hover">
        <thead class="table-dark">
            <th>Id</th>
            <th>Name</th>
            <th>Genre</th>
            <th>Price</th>
            <th>Release Date</th>
            <th></th>
        </thead>
        <tbody>
            @foreach (var Game in games)
            {
                <tr>
                    <td>@Game.Id</td>
                    <td>@Game.Name</td>
                    <td>@Game.Genre</td>
                    <td>@Game.Price</td>
                    <td>@Game.ReleaseDate.ToString("dd-MM-yyyy")</td>
                    <td>
                        <button class="btn btn-primary" @onclick="(()=>EditGame(Game.Id))">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal"
                                @onclick="(()=> currentGame = Game)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Game[] games = [];

    private Game? currentGame;

    protected override async Task OnInitializedAsync()
    {
        games = await GetGames();
        base.OnInitialized();
    }

    private async Task<Game[]> GetGames() {
        return await GameService.GetGames();
    }

    private void CreateGame()
    {
        NavigationManager.NavigateTo("/game");
    }

    private void EditGame(int id)
    {
        NavigationManager.NavigateTo($"/game/{id}");
    }

    private async Task OnDeleteModelClosed(bool accepted)
    {
        if (accepted)
        {
            await GameService.DeleteGame(currentGame!.Id);
            games = await GetGames();
        }
    }
}

